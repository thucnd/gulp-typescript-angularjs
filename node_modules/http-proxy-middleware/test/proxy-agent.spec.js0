var expect          = require('chai').expect;
var proxyMiddleware = require('../index');
var http            = require('http');
var HttpsProxyAgent = require('https-proxy-agent');
var express         = require('express');
var WebSocket       = require('ws');
var WebSocketServer = require('ws').Server;

describe('Proxy agent', function () {
    var proxyServer, proxyAgentServer, targetServer, ws, wss;
    var targetRequest;
    var responseBody;
    var proxy;

    beforeEach(function () {
        proxy = proxyMiddleware('http://localhost:8000/api', {
                    pathRewrite: {'^/api' : '/blaat'},
                    agent: new HttpsProxyAgent('http://localhost:9999')
                });
        proxyServer = createServer(3000, proxy);

        // proxyAgentServer = createServer(9999, function (req, res, next) {
        //     // targetRequest = req;  // store target url.
        //     // console.log(9999999999, req.url);
        //     res.write(req.url);                                       // respond with req.url
        //     res.end();
        // });

        targetServer = createServer(8000, function (req, res, next) {
            targetRequest = req;  // store target url.
            res.write(req.url);                                       // respond with req.url
            res.end();
        });

    });

    beforeEach(function (done) {
        http.get('http://localhost:3000/api/foo/bar/proxy/agent', function (res) {
            res.on('data', function (chunk) {
                responseBody = chunk.toString();
                done();
            });
        });
    })

    describe('usage with agent', function () {

        it('should rewrite path with proxy agent', function () {
            expect(responseBody).to.equal('/foo/bar/proxy/agent');
        });
    });


    afterEach(function () {
        proxyServer.close();
        targetServer.close();
    });

});

function createServer (portNumber, middleware) {
    var app = express();

    if (middleware) {
        app.use(middleware);
    }

    var server = app.listen(portNumber);

    return server;
}
